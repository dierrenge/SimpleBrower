/**
 * @param filename  要打开的文件名字
 * @param propName   文件里面的键名字
 * @return  所选择的文件里面的propName对应的值
 */
def getProperty(String filename, String propName) {
    def propsFile = file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            //下面这个输出在android studio3.1里面 在Build窗口 右边一个锤子下面 toggle哪里，就是原来的message哪里
            def v = props[propName] + ""
            def versionName = v[0..-3] + "." + v[-2] + "." + v[-1]
            println("versionName "+versionName)
            return versionName
        } else {
            println("No such property " + propName + " in file " + filename);
        }
    } else {
        println(filename + " does not exist!")
    }
}

//version.properties  里面的versionName 自动更新
def PropertyAdd(String filename, String propName) {
    //这里必须用file  如果用rootProject的话 则找不到file为null
    def propsFile = file(filename)
    //只有在打正式版的情况下才继续运行，否则退出方法，这样是为了防止 编译时候versionCode 也自增 if里面的参数可以在Build窗口里面 message 最上边[]里面就是
    def runTasks = gradle.startParameter.taskNames
    if (!(':app:assembleRelease' in runTasks)) {
        return
    }
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        //这里要注意 props[propName] 是String 类型
        if (props[propName] != null) {
            def code = (props[propName]).toInteger() //转成Integer
            props[propName]= (++code).toString()  //自增 且转成String
        } else {
            println("No such property " + propName + " in file " + filename);
        }
        //在这里提交 对version.properties的更改
        props.store(propsFile.newWriter(),null)
    } else {
        println(filename + " does not exist!")
    }
}

//用于生成时间
def buildTime() {
    def date = new Date()
    //yy年 MM月 dd日 HH小时 mm分钟 ss秒
    def formattedDate = date.format('yyMMdd_HHmm')
    return formattedDate
}

plugins {
    id 'com.android.application'
}

android {
    namespace 'cn.cheng.simpleBrower'
    compileSdk 35

    defaultConfig {
        applicationId "cn.cheng.simpleBrower"
        minSdk 24
        targetSdk 35
        versionCode 3
        //这里 注意啦 调用方法
        versionName getProperty("version.properties","versionName")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildToolsVersion '35.0.0'

    //给文件重新命名的代码，记住是在Android 节点下
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    //拿到输出文件
                    def outputFile = output.outputFile
                    //这里也可以调用上面的 (':app:assembleRelease' in runTasks) 进行判断 感觉会更好一些
                    if (outputFile.name.contains("release")) {
                        //在字符串里面调用方法的话，得要${ }里面调用 切记
                        outputFileName = new File("../release/","release-${getProperty("version.properties","versionName")}_DATE-${buildTime()}.apk");
                        //调用方法 versionName 自动更新
                        PropertyAdd("version.properties", "versionName")
                    }
                    if (outputFile.name.contains("debug")) {
                        outputFileName = new File("../debug/","debug-${getProperty("version.properties","versionName")}_DATE-${buildTime()}.apk")
                    }
            }
    }
}
// 上面修改Android版本(如34->35) compileSdk和buildToolsVersion都要改

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // FloatingActionButton 一个按钮ui框架
    implementation 'com.github.clans:fab:1.6.4'

    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation files('libs\\bcprov-jdk16-139.jar')

    implementation 'com.google.code.gson:gson:2.8.6'

    // 沉浸式状态栏(状态栏工具)
    // 需在项目根目录下的gradle.properties文件中加入这两行
    // android.useAndroidX=true //是否使用androidx
    // android.enableJetifier=true //是否将引入的第三方库中的android.support强制转为androidx
    // implementation "com.jaeger.statusbarutil:library:1.5.1"

    /**
     * 视频播放框架
     * 使用版本：v8.1.7-release-jitpack、v9.0.0-release-jitpack（compileSdk 34，gradle 7.3.1）、v10.2.0
     */
    // v9.0.0-release-jitpack完整版引入
    // implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:v9.0.0-release-jitpack'
    // v9.0.0-release-jitpack部分引入
    /*implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-java:v9.0.0-release-jitpack'
    // 是否需要ExoPlayer模式 支持格式更多
    implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-exo2:v9.0.0-release-jitpack'
    // 是否需要AliPlayer模式
    // implementation 'com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer-aliplay:v9.0.0-release-jitpack'
    // 根据你的需求ijk模式的so
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-arm64:v9.0.0-release-jitpack'
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-armv7a:v9.0.0-release-jitpack'
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-armv5:v9.0.0-release-jitpack'
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x86:v9.0.0-release-jitpack'
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x64:v9.0.0-release-jitpack'*/

    // v10.2.0完整版引入
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer:v10.2.0'
    // v10.2.0部分引入
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-java:v10.2.0'
    //是否需要ExoPlayer模式
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-exo2:v10.2.0'
    //是否需要AliPlayer模式
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-aliplay:v10.2.0'
    //根据你的需求ijk模式的so
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-arm64:v10.2.0'
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-armv7a:v10.2.0'
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-armv5:v10.2.0'
    // implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-x86:v10.2.0'
    implementation 'com.github.CarGuo.GSYVideoPlayer:gsyvideoplayer-x64:v10.2.0'

}